# -*- coding: utf-8 -*-
"""xm_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iVNfPi9vXZyTrzYWpfPoin_E57Xu6YRX

**Import libraries for the project**
"""

from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import matplotlib.pyplot as plt
import numpy as np

"""**Load mnist dataset and process, reshape the dataset**"""

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()


x_train = x_train.reshape((x_train.shape[0], x_train.shape[1], x_train.shape[2], 1)) / 255.0
x_test = x_test.reshape((x_test.shape[0], x_test.shape[1], x_test.shape[2], 1)) / 255.0

fig, axes = plt.subplots(nrows=1, ncols=5, figsize=(5, 5))
for i, ax in enumerate(axes.flat):
    ax.imshow(x_train[i], cmap='binary')
    ax.set_title('Label: {}'.format(y_train[i]))
    ax.axis('off')
plt.show()

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

print(x_train.shape)
print(x_test.shape)

print(y_test[0])

"""**Print some part of the dataset**

**CNN model structure build**
"""

# Define the model
model = Sequential([
    Conv2D(32, (3, 3), strides=(1, 1), padding='same', activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(pool_size=(3, 3)),
    Conv2D(64, (3, 3), strides=(1, 1), padding='same', activation='relu'),
    MaxPooling2D(pool_size=(3, 3)),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(10, activation='softmax')
])
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

"""**Print the model summary**"""

#print the model
model.summary()

"""**Train the model with dataset**"""

# Train the model
model.fit(x_train, y_train, batch_size=128, epochs=10, validation_split=0.1)

"""**Model evaluation with test data**"""

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(x_test, y_test)
print('Test loss:', test_loss)
print('Test accuracy:', test_acc)

predict = model.predict(x_test)
print(predict[0])

y_precit_class = np.argmax(predict[0])
y_precit_class